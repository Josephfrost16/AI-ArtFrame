@page "/"
@rendermode InteractiveServer
@using login.Servicios
@inject UserService UserService
@inject NavigationManager Navigation

<h3>Iniciar sesión</h3>

@if (!string.IsNullOrEmpty(Message))
{
    <p>@Message</p>
}

<form>
    <div>
        <label for="Email">Correo Electrónico:</label>
        <input type="email" id="Email" @bind="Email" required />
    </div>
    <div>
        <label for="Password">Contraseña:</label>
        <input type="password" id="Password" @bind="Password" required />
    </div>
    <button type="button" @onclick="LoginUser">Iniciar sesión</button>
</form>

<button @onclick="GoToRegisterPage">Registrar una cuenta</button>

@code {
    private string Email { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string Message { get; set; } = string.Empty;

    private async Task LoginUser()
    {
        // Validar que el correo y la contraseña no estén vacíos
        if (string.IsNullOrWhiteSpace(Email) || string.IsNullOrWhiteSpace(Password))
        {
            Message = "Por favor ingrese ambos campos.";
            return;
        }

        // Llamar al servicio de UserService para verificar las credenciales
        var user = await UserService.Login(Email, Password);

        if (user != null)
        {
            Message = "Inicio de sesión exitoso!";
            // Aquí puedes redirigir a la página principal si el inicio de sesión es exitoso
            Navigation.NavigateTo("/register");
        }
        else
        {
            Message = "Credenciales incorrectas o cuenta no verificada.";
        }
    }

    private void GoToRegisterPage()
    {
        // Redirigir al usuario a la página de registro
        Navigation.NavigateTo("/register"); 
    }
}
